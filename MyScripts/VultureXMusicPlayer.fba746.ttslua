-- Music Player by VultureX
gPlaylist = {
    selectedIndex = 0,

    fight = {
        buttonIndex = 1,
        text = 'http://chry.me/NCS_Infinity/03%20-%20Hollah!.mp3\n'
            .. 'http://chry.me/NCS_Infinity/04%20-%20Entropy.mp3',
    },
    calm = {
        buttonIndex = 2,
        text = 'http://chry.me/NCS_Infinity/01%20-%20Candyland.mp3\n'
            .. 'http://chry.me/NCS_Infinity/02%20-%20Safari%20Fruits.mp3',
    },
    scary = {
        buttonIndex = 3,
        text = 'http://chry.me/NCS_Infinity/05%20-%20High.mp3',
    },
    festive = {
        buttonIndex = 4,
        text = 'http://chry.me/NCS_Infinity/06%20-%20Nekozilla.mp3',
    },
    defeat = {
        buttonIndex = 5,
        text = 'http://chry.me/NCS_Infinity/07%20-%20Adventures%20ft.%20Alexa%20Lusader.mp3',
    },
    victory = {
        buttonIndex = 6,
        text = 'http://chry.me/NCS_Infinity/08%20-%20Force.mp3',
    }
}

gButton = {
    indexOfLastAdded = -1,
    defaultColor = {r=1, g=1, b=1},
    playingColor = {r=0, g=0, b=1},
    selectedColor = {r=0.5, g=0.5, b=0.5},
}

gInput = {
    index = 0
}

gMusicPlayer = {
    isPlaying = false,
}

gTestString = [[
hi ..
how are you
doing.
]]

--[[ The onLoad event is called after the game save finishes loading. --]]
function onLoad(json)
-- Load variables
    load(json)

-- Create buttons
    local height = 0.5
    gPlaylist.fight.buttonIndex     = addButton('onFightButtonClicked', {-1,height,0}, 'FIGHT')
    gPlaylist.calm.buttonIndex      = addButton('onCalmButtonClicked', {0,height,0}, 'Calm')
    gPlaylist.scary.buttonIndex     = addButton('onScaryButtonClicked', {1,height,0}, 'ScArY')
    gPlaylist.festive.buttonIndex   = addButton('onFestiveButtonClicked', {-1,height,1}, 'F3ST!V3')
    gPlaylist.defeat.buttonIndex    = addButton('onDefeatButtonClicked', {0,height,1}, 'Defeat')
    gPlaylist.victory.buttonIndex   = addButton('onVictoryButtonClicked', {1,height,1}, 'VICTORY')

-- Create playlist input field
    self.createInput({
        input_function = "onPlaylistInput",
        function_owner = self,
        value          = getPlaylist(gPlaylist.selectedIndex).text,
        position       = {x=0, y=1, z=-1},
        width          = 2400,
        height         = 1000,
        font_size      = 100,
        scale          = {0.8, 0.1, 0.8},
        color          = {0, 1, 0, 1}, -- 100% green background
        font_color     = {1, 1, 1}, -- white
    })

    --self.UI.setAttribute("mapSelection", "active", true)
    --self.UI.show("mapSelection")
end

function getPlaylist(index)
    for k,v in pairs(gPlaylist) do
        if(type(v) == 'table') and v.buttonIndex == index then
            return v
        end
    end
    return nil
end

function getPlaylistName(index)
    for k,v in pairs(gPlaylist) do
        if(type(v) == 'table') and v.buttonIndex == index then
            return k
        end
    end
    return nil
end

function load(savedData)
    if savedData ~= '' then
        local jsonData = JSON.decode(savedData)
        gPlaylist = jsonData[1]
	end
end

function onSave()
	return JSON.encode({
        gPlaylist
    })
end

function onPlaylistInput(obj, playerColor, input, stillEditing)
    if not stillEditing then
        local key = getPlaylistName(gPlaylist.selectedIndex)
        gPlaylist[key].text = input
        print("Updated playlist: ", key)
    end
end

--[[ Create playlist from list of strings. --]]
function makePlaylist(inputString)
    local tbl = mysplit(inputString)
    local t={}
    for k,v in pairs(tbl) do
        local playlist = {
            url=v,
            title=tostring(k),
        }
        table.insert(t, playlist)
    end
    return t
end

function mysplit (inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t={}
    -- capture strings which contain at least one character of anything other than the desired separator
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        table.insert(t, str)
    end
    return t
end

--Plays currently loaded audioclip when everyone has loaded the audioclip.
function PlayMusic()
  --Wait for everyone to load the audioclip.
  while MusicPlayer.loaded == false do
      coroutine.yield(0)
  end

  --Play audioclip.
  local isPlaying = MusicPlayer.play()
  if isPlaying then
      print('Playing: ', MusicPlayer.getCurrentAudioclip()['title'])
      gMusicPlayer.isPlaying = true
  else
      print('Failed to play music!')
      gMusicPlayer.isPlaying = false
  end

  return 1
end

function makestr(o)
   if type(o) == 'table' then
      local s = ''
      for k,v in pairs(o) do
         s = s .. makestr(v) .. '\n'
      end
      return s
   else
      return tostring(o)
   end
end

function dump(o)
   if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
         if type(k) ~= 'number' then k = '"'..k..'"' end
         s = s .. '['..k..'] = ' .. dump(v) .. ' '
      end
      return s .. '} '
   else
      return tostring(o)
   end
end

function shuffle(tbl)
  for i = #tbl, 2, -1 do
    local j = math.random(i)
    tbl[i], tbl[j] = tbl[j], tbl[i]
  end
  return tbl
end

function RestartPlaylist()

end

function switchTo(playlistEntry)
    -- Pause the music player if we press the same button
    if gMusicPlayer.isPlaying and gPlaylist.selectedIndex == playlistEntry.buttonIndex then
        gMusicPlayer.isPlaying = not MusicPlayer.pause()
        unSelectButton(gPlaylist.selectedIndex, gButton.selectedColor)
        return
    end

    -- Update the selected index
    unSelectButton(gPlaylist.selectedIndex, gButton.defaultColor)
    gPlaylist.selectedIndex = playlistEntry.buttonIndex

    -- Update the input field
    self.editInput({
        index          = gInput.index,
        value          = playlistEntry.text,
    })

    -- Check if playlist is empty
    if playlistEntry.text == '' then
        unSelectButton(gPlaylist.selectedIndex, gButton.selectedColor)
        print('Playlist is empty!')
        return
    end

    -- Play music
    local playlist = makePlaylist(playlistEntry.text)
    local playlist = shuffle(playlist)
    print(dump(playlist))
    MusicPlayer.setPlaylist(playlist)
    MusicPlayer.setCurrentAudioclip(playlist[1])

    selectButton(playlistEntry.buttonIndex, gButton.playingColor)
    startLuaCoroutine(self, "PlayMusic")
end

function onFightButtonClicked()
    switchTo(gPlaylist.fight)
end

function onCalmButtonClicked()
    switchTo(gPlaylist.calm)
end

function onScaryButtonClicked()
    switchTo(gPlaylist.scary)
end

function onFestiveButtonClicked()
    switchTo(gPlaylist.festive)
end

function onDefeatButtonClicked()
    switchTo(gPlaylist.defeat)
end

function onVictoryButtonClicked()
    switchTo(gPlaylist.victory)
end

function unSelectButton(index, color)
    --print('unselecting: ', index)
    self.editButton({
        index          = index,
        color          = color,
    })
end

function selectButton(index, color)
    unSelectButton(gPlaylist.selectedIndex, gButton.defaultColor)
    gPlaylist.selectedIndex = index

    self.editButton({
        index          = index,
        color          = color,
    })
end

function addButton(click_function, position, label)
    self.createButton({
        label           = label,
        click_function  = click_function,
        function_owner  = self,
        position        = position,
        height          = 300,
        width           = 400,
        color           = gButton.defaultColor,
    })

    gButton.indexOfLastAdded = gButton.indexOfLastAdded + 1
    --print('Add button ', label, ' with index: ', gButton.indexOfLastAdded)
    return gButton.indexOfLastAdded
end

--[[ The onUpdate event is called once per frame. --]]
function onUpdate()
    --[[ print('onUpdate loop!') --]]
    --print(MusicPlayer.player_status)
end