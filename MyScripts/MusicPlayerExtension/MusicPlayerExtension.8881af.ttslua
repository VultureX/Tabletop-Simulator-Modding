-- Music Player Extension v1.1.0 by VultureX

function new(parent, object)
    object = object or {}
    setmetatable(object, parent)
    parent.__index = parent -- inherit missing properties
    return object
end

function isTable(object)    return type(object) == 'table'  end
function isNumber(object)   return type(object) == 'number' end
function isString(object)   return type(object) == 'string' end
function isFunction(object) return type(object) == 'function' end
function choose(bool, a, b) if bool then return a else return b end end
function stringOr(a, b) if isString(a) then return a else return b end end
function isNonEmptyString(a) return isString(a) and a ~= '' end
function isEmptyTable(a) return isTable(a) and next(a) == nil end

function isLeftMouseButton(button)  return tonumber(button) == -1 end
function isRightMouseButton(button) return tonumber(button) == -2 end
function isScrollButton(button)     return tonumber(button) == -3 end

gVersion = {
    major   = '1',
    minor   = '1',
    patch   = '0',

    toString = function()
        return 'v' .. gVersion.major
            .. '.' .. gVersion.minor
            .. '.' .. gVersion.patch
    end,
}

gDebug = {
    log     = false,
}

gWindow = {
    id              = 'outputWindow',
    log             = true,
    text            = '',
    title           = 'Music Player Extension',
}

gMenu = {
    current             = nil, -- gMenu
    items               = nil, -- {gMenuItem}
    selectedItemIndex   = 1,
    maxItems            = 6,
    title               = '',
    data                = nil, -- context dependent data
    dataItem            = nil, -- context dependent gMenuItem
    viewItems           = nil, -- context dependent {gMenuItem}
    isFirstShow         = true,
    onConfirm           = function(this) end,
    onShow              = function(this) this.isFirstShow = false end,
    onLoad              = function(this) gMenu.initItems(this) end,

    initItems = function(this)
        for k,item in pairs(this.items) do
            if item.isInputButton then
                item.data = nil
            end
            item.inputView = gView.getInput(k)
            item.buttonView = gView.getButton(k)
        end
    end,

    getSelectedItem = function(this)
        return this.items[this.selectedItemIndex]
    end,
    getItem = function(this, index)
        return this.items[index]
    end,
}

gSongData = {
    songs       = {}, -- {gSong}
    songIndex   = 0,
}

function notify(message)
    if message ~= nil then log(message) end
end

textNoPlaylists = function()
    if #gData.playlists == 0 then
        return "There are no playlists!"
    end
    return nil
end

textOnePlaylist = function()
    if #gData.playlists == 1 then
        return "There is only one playlist!"
    end
    return nil
end

textPlaylists = function()
    local noPlaylists = textNoPlaylists()
    if noPlaylists ~= nil then
        return noPlaylists
    end

    local str = 'Playlists:\n'
    for k , playlist in pairs(gData.playlists) do
        str = str .. '#' .. k .. ' ' .. playlist.title .. '\n'
    end
    return str
end

textSongs = function(playlist)
    local noSongs = textNoSongs(playlist)
    if noSongs ~= nil then
        return noSongs
    end

    local str = 'Songs in ' .. playlist.title .. ':\n'
    for k , song in pairs(playlist.songs) do
        str = str .. '#' .. k .. ' ' .. song.title .. ' ('
        str = str .. song.url .. ')\n' -- todo: cap string length
    end
    return str
end

textNoSongs = function(playlist)
    if #playlist.songs == 0 then
        return "Playlist '" .. playlist.title .. "' is empty!"
    end
    return nil
end

passItemDataOnClick = function(item)
    setMenuData(item.nextMenu, item.data)
    gMenuItem.onClicked(item)
end

passMenuDataOnClick = function(item)
    setMenuData(item.nextMenu, gMenu.current.data)
    gMenuItem.onClicked(item)
end

updateDataWithPlaylist = function(dataItem, viewItems)
    -- Update playlist index and get the title
    local playlistTitle = nil
    if #gData.playlists > 0 then
        if dataItem.data > #gData.playlists then
            dataItem.data = 1
        end

        playlistTitle = gData.playlists[dataItem.data].title
    else
        dataItem.data = 1
    end

    -- Update the views
    for _ , viewItem in pairs(viewItems) do
        viewItem:updatePlaylistText(playlistTitle)
    end
end

setMenuData = function(menu, data)
    if menu ~= nil then
        menu.data = data
    end
end

onPlayClicked       = function(item) gMusicPlayer.play() end
onRestartClicked    = function(item) gMusicPlayer.restart() end
onNextSongClicked   = function(item) gMusicPlayer.nextSong() end
onPreviousSongClicked = function(item) gMusicPlayer.previousSong() end

gMenus = {
    main                = new(gMenu),
    playlists           = new(gMenu),
    createPlaylist      = new(gMenu),
    editPlaylist        = new(gMenu),
    addSong             = new(gMenu),
    removeSong          = new(gMenu),
    removePlaylist      = new(gMenu),
    menuBar             = new(gMenu),
    default             = nil, -- set to one of above in gMenus.construct()

    construct = function()
        gMenus.main.title = gWindow.title
        local playItem = gMenuItem.new('Play / Pause')
        playItem.onClicked = onPlayClicked
        local loadPlaylistAction = function(item, playlistIndex)
            gMusicPlayer:loadPlaylist(playlistIndex)
        end
        local loadPlaylistItem
            = gMenuItem.newPlaylistAction('Load', nil, loadPlaylistAction)
        gMenus.main.viewItems = { loadPlaylistItem }
        local playlistItem = gMenuItem.newPlaylistToggle(gMenus.main.viewItems)
        gMenus.main.dataItem = playlistItem
        gMenus.main.items = {
            playlistItem,
            loadPlaylistItem,
            gMenuItem.new('Playlists', gMenus.playlists),
            playItem,
            --gMenuItem.new('Favorites'),
            --gMenuItem.new('Settings'),
        }
        gMenus.main.onShow = function(this)
            local playlistItem = gMenu.current.dataItem
            local viewItems = gMenu.current.viewItems
            updateDataWithPlaylist(playlistItem, viewItems)

            clearScreen()
            if not this.isFirstShow then
                showMusicPlayerStatus()
            end
            gMenu.onShow(this)
        end

        gMenus.playlists.title = 'Playlists'
        local editItem
            = gMenuItem.newPlaylistAction('Edit', gMenus.editPlaylist)
        editItem.playlistPrefix = 'Edit'
        local removeItem
            = gMenuItem.newPlaylistAction('Remove', gMenus.removePlaylist)
        removeItem.playlistPrefix = 'Remove'
        gMenus.playlists.viewItems = { editItem, removeItem }
        local playlistItem
            = gMenuItem.newPlaylistToggle(gMenus.playlists.viewItems)
        gMenus.playlists.dataItem = playlistItem
        gMenus.playlists.items = {
            gMenuItem.new('Create', gMenus.createPlaylist),
            playlistItem,
            editItem,
            removeItem,
            gMenuItem.newBackButton(),
        }
        gMenus.playlists.onShow = function(this)
            local playlistItem = gMenu.current.dataItem
            local viewItems = gMenu.current.viewItems
            updateDataWithPlaylist(playlistItem, viewItems)

            -- Show playlists and songs
            clearScreen()
            local text = ''
            text = textPlaylists() .. '\n'
            for _ , playlist in pairs(gData.playlists) do
                text = text .. textSongs(playlist) .. '\n'
            end
            notify(text)
        end

        gMenus.createPlaylist.title = 'Create Playlist'
        local enterNameItem = gMenuItem.newInput('Enter Name')
        gMenus.createPlaylist.dataItem = enterNameItem
        gMenus.createPlaylist.items = {
            enterNameItem,
            gMenuItem.newConfirmButton(),
            gMenuItem.newBackButton(),
        }
        gMenus.createPlaylist.onConfirm = function(this)
            local inputText = this.dataItem.data
            if isNonEmptyString(inputText) then
                clearScreen()
                addPlaylist(inputText)
                notify(textPlaylists())
                --goBackMenu()
            else
                log('Please enter a name!')
            end
        end

        gMenus.editPlaylist.title = 'Edit playlist'
        local addSongItem = gMenuItem.new('Add Song', gMenus.addSong)
        addSongItem.onClicked = passMenuDataOnClick
        local enterSongItem = gMenuItem.newNumericInput('Enter Song #...')
        gMenus.editPlaylist.dataItem = enterSongItem
        local removeSongItem = gMenuItem.new('Remove Song', gMenus.removeSong)
        removeSongItem.onClicked = function(this)
            -- data is expected to be a gPlaylist
            local songIndex = gMenu.current.dataItem.data
            if songIndex ~= nil then
                songIndex = tonumber(songIndex)
                if songIndex > 0 and songIndex <= #gMenu.current.data.songs then
                    local songData = new(gSongData)
                    songData.songs = gMenu.current.data.songs
                    songData.songIndex = songIndex
                    setMenuData(this.nextMenu, songData)
                    gMenuItem.onClicked(this)
                else
                    log('Song #' .. songIndex .. ' does not exist!')
                end
            else
                log('Please enter a song number!')
            end
        end
        gMenus.editPlaylist.items = {
            addSongItem,
            enterSongItem,
            --gMenuItem.new('Edit Song'),
            removeSongItem,
            gMenuItem.newBackButton(),
        }
        gMenus.editPlaylist.onLoad = function(menu)
            local songIndex = gMenus.playlists.dataItem.data
            menu.data = gData.playlists[songIndex]
            menu.title = 'Edit ' .. menu.data.title
            gMenu.onLoad(menu)
        end
        gMenus.editPlaylist.onShow = function(this)
            clearScreen()
            notify(textSongs(this.data))
            gMenu.onShow(this)
        end

        gMenus.removePlaylist.items = {
            gMenuItem.newConfirmButton(),
            gMenuItem.newBackButton(),
        }
        gMenus.removePlaylist.onLoad = function(menu)
            local songIndex = gMenus.playlists.dataItem.data
            menu.data = gData.playlists[songIndex]
            menu.title = 'Remove ' .. menu.data.title .. '?'
            gMenu.onLoad(menu)
        end
        gMenus.removePlaylist.onConfirm = function(menu)
            -- data is expected to be a gPlaylist
            local index = listIndexOf(menu.data.title, gData.playlists)
            if index > 0 then
                table.remove(gData.playlists, index)
                show("Removed '" .. menu.data.title .. "'")
                goBackMenu()
            end
        end
        gMenus.removePlaylist.onShow = function(this)
            clearScreen()
            notify(textSongs(this.data))
            gMenu.onShow(this)
        end

        local enterNameItem = gMenuItem.newInput('Enter Name')
        local enterUrlItem = gMenuItem.newInput('Enter Url')
        gMenus.addSong.dataItem = { enterNameItem, enterUrlItem }
        gMenus.addSong.title = 'Add Song to playlist'
        gMenus.addSong.items = {
            enterNameItem,
            enterUrlItem,
            gMenuItem.newConfirmButton(),
            gMenuItem.newBackButton(),
        }
        gMenus.addSong.onConfirm = function(this)
            local nameText = this.dataItem[1].data
            local urlText = this.dataItem[2].data
            if isNonEmptyString(nameText) and isNonEmptyString(urlText) then
                clearScreen()
                addSong(nameText, urlText, this.data)
                notify(textSongs(this.data))
            else
                log('Please enter a name and url!')
            end
        end
        gMenus.addSong.onLoad = function(menu)
            menu.title = 'Add Song to ' .. menu.data.title
            gMenu.onLoad(menu)
        end

        gMenus.removeSong.items = {
            gMenuItem.newConfirmButton(),
            gMenuItem.newBackButton(),
        }
        gMenus.removeSong.onLoad = function(menu)
            local songTitle = menu.data.songs[menu.data.songIndex].title
            menu.title = 'Remove ' .. songTitle .. '?'
            gMenu.onLoad(menu)
        end
        gMenus.removeSong.onConfirm = function(menu)
            -- data is expected to be gSongData
            local songTitle = menu.data.songs[menu.data.songIndex].title
            table.remove(menu.data.songs, menu.data.songIndex)
            show("Removed '" .. songTitle .. "'")
            goBackMenu()
        end

        local shuffleButton     = new(gMenuItem)
        local restartButton     = new(gMenuItem)
        local previousButton    = new(gMenuItem)
        local nextButton        = new(gMenuItem)
        local playButton        = new(gMenuItem)
        local loopButton        = new(gMenuItem)
        playButton.onClicked    = onPlayClicked
        restartButton.onClicked = onRestartClicked
        nextButton.onClicked    = onNextSongClicked
        previousButton.onClicked = onPreviousSongClicked

        gMenus.menuBar.items = {
            shuffleButton,
            restartButton,
            previousButton,
            playButton,
            nextButton,
            restartButton,
            loopButton,
        }

        gMenus.default = gMenus.main
    end
}

gMenuItem = {
    defaultColor    = "rgb(1,1,1)",
    selectedColor   = "rgb(0.5,1,1)",
    buttonView      = nil, -- gView
    inputView       = nil, -- gView
    data            = nil, -- context dependent data

    title           = '',
    nextMenu        = nil, -- gMenu
    isInputButton   = false,
    isBackButton    = false,
    isConfirmButton = false,
    isNumericInput  = false,
    isPlaylistItem  = false,
    isSongItem      = false,
    playlistPrefix  = '',

    onClicked = function(this)
        if this.nextMenu == nil then
            if not this.isInputButton then logDebug('nextMenu is nil!') end
            return
        end

        loadMenu(this.nextMenu)
    end,

    getView = function(this)
        if this.isInputButton then
            return this.inputView
        else
            return this.buttonView
        end
    end,

    updatePlaylistText = function(this, playlistTitle)
        if playlistTitle == nil then
            this:getView():setText(this.title)
        else
            this:getView():setText(this.playlistPrefix .. ' ' .. playlistTitle)
        end
    end,

    new = function(title, nextMenu)
        return new(gMenuItem, {title=title, nextMenu=nextMenu})
    end,
    newInput = function(title, nextMenu)
        return new(gMenuItem, {
            title=title,
            nextMenu=nextMenu,
            isInputButton=true,
        })
    end,
    newNumericInput = function(title, nextMenu)
        local item = gMenuItem.newInput(title, nextMenu)
        item.isNumericInput=true
        return item
    end,
    newPlaylistToggle = function(viewItems)
        local playlistItem = gMenuItem.new('Next Playlist')
        playlistItem.data = 1
        playlistItem.onClicked = function(this)
            notify(textNoPlaylists())
            notify(textOnePlaylist())
            this.data = this.data + 1
            updateDataWithPlaylist(this, viewItems)
            --gMenuItem.onClicked(this)
        end
        return playlistItem
    end,
    newPlaylistAction = function(prefix, nextMenu, action)
        if action == nil then
            action = function(this, playlistIndex)
                gMenuItem.onClicked(this)
            end
        end

        local item = gMenuItem.new(prefix .. ' Playlist', nextMenu)
        item.playlistPrefix = prefix
        item.onClicked = function(this)
            local playlistIndex = gMenu.current.dataItem.data
            playlistIndex = tonumber(playlistIndex)
            if playlistIndex > 0 and playlistIndex <= #gData.playlists then
                action(this, playlistIndex)
            else
                if #gData.playlists == 0 then
                    notify(textNoPlaylists())
                else
                    log('Playlist #' .. playlistIndex .. ' does not exist!')
                end
            end
        end
        return item
    end,
    newBackButton = function()
        return new(gMenuItem, {
            title='Back',
            isBackButton=true,
            onClicked=function(this) goBackMenu() end
        })
    end,
    newConfirmButton = function()
        return new(gMenuItem, {
            title='Confirm',
            isConfirmButton=true,
            onClicked=function(this) gMenu.current:onConfirm() end
        })
    end,
}

gMenuStack = {
    push = function(menu)
        table.insert(gMenuStack, 1, menu)
    end,
    pop = function()
        table.remove(gMenuStack, 1)
    end,
}

gView = {
    id = '',

    setText = function(thisOrId, value)
        gView.set(thisOrId, "text", value)
    end,
    setPlaceholderText = function(thisOrId, value)
        gView.set(thisOrId, "placeholder", value)
    end,
    setInteractable = function(thisOrId, value)
        gView.set(thisOrId, "interactable", value)
    end,
    hide = function(thisOrId)
        gView.set(thisOrId, "active", false)
    end,
    show = function(thisOrId, value)
        gView.set(thisOrId, "active", value or true)
    end,
    setColor = function(thisOrId, color)
        gView.set(thisOrId, "color", color)
    end,
    -- Don't use this, it doesn't work well
    setNumericInput = function(thisOrId, isNumeric)
        local mode
        if isNumeric then mode = "Integer" else mode = "None" end
        gView.set(thisOrId, "characterValidation", mode)
    end,
    set = function(thisOrId, attribute, val)
        self.UI.setAttribute(stringOr(thisOrId, thisOrId.id), attribute, val)
    end,
    reset = function(this)
        this:hide()
        this:setInteractable(true)
    end,

    getButton = function(index)
        return gView.getElement('button' .. index)
    end,
    getInput = function(index)
        local view = gView.getElement('input' .. index)
        local scrollView = gView.getElement('inputScroll' .. index)
        view.show = function(thisOrId, val)
            gView.show(scrollView, val)
            gView.show(thisOrId, val)
        end
        view.hide = function(thisOrId)
            gView.hide(scrollView)
            gView.hide(thisOrId)
        end
        return view
    end,
    getBarButton = function(index)
        return gView.getElement('barButton' .. index)
    end,
    getElement = function(id)
        -- Could optimize... Cache elements, put id in new table...
        return new(gView, {id=id})
    end,
}

gPlaylist = {
    title       = '',
    songs       = {}, -- {gSong}
}

gSong = {
    title       = '',
    url         = '',
}

gData = {
    -- v1.0.0
    playlists           = {}, -- {gPlaylist}
    -- v1.1.0
    lastPlaylistIndex   = 0,
    lastSongIndex       = 0,
}

function listIndexOf(title, list)
    for k,v in pairs(list) do
        if v.title == title then
            return k
        end
    end
    return -1
end

function existsPlaylist(title)
    return listIndexOf(title, gData.playlists) > 0
end

function existsSong(title, songs)
    return listIndexOf(title, songs) > 0
end

function addPlaylist(name)
    if existsPlaylist(name) then
        log("Playlist '" .. name .. "' already exists!")
        return false
    end

    -- don't use new(gPlaylist) or gPlaylist, we need a deep copy!
    table.insert(gData.playlists, 1, {})
    gData.playlists[1].title = name
    gData.playlists[1].songs = {}

    log('Added: ' .. name)
    return true
end

function addSong(name, url, playlist)
    if existsSong(name, playlist.songs) then
        log("Song '" .. name .. "' already exists!")
        return false
    end

    local newIndex = #playlist.songs + 1
    table.insert(playlist.songs, newIndex, {})
    playlist.songs[newIndex].title = name
    playlist.songs[newIndex].url = url

    log('Added song: ' .. name .. '\nurl: ' .. url)
    return true
end

function initUi()
    gView.setPlaceholderText(gWindow.id, gWindow.title .. " by VultureX - "
        .. gVersion.toString())
end

function onLoad(userData)
    load(userData)
    initUi()

    gMenus.construct()
    loadMenu(gMenu.main)

    gMusicPlayer:load()
end

function yield()
    coroutine.yield(0)
end

gCoroutine = {
    isProcessing        = false,
    functionToExecute   = nil, -- function(args)
    args                = nil, -- arguments for functionToExecute

    setArgs = function(args)
        if gCoroutine.isProcessing then
            log("Coroutine is still processing! (setArgs)")
            return false
        end
        gCoroutine.args = args
        return true
    end,

    impl = function()
        gCoroutine.functionToExecute(gCoroutine.args)
        gCoroutine.args = nil
        gCoroutine.isProcessing = false
        return 1
    end,

    start = function(action)
        if not isFunction(action) then
            log("Can't execute null action! (start)")
            return false
        end

        if gCoroutine.isProcessing then
            log("Coroutine is still processing! (start)")
            return false
        end

        gCoroutine.isProcessing = true
        gCoroutine.functionToExecute = action
        startLuaCoroutine(self, "gExec")
        return true
    end,
}
gExec = gCoroutine.impl

gMusicPlayer = {
    songIndex               = 0,
    loadedPlaylist          = nil, --gPlaylist
    isLoading               = false,
    autoPlay                = false,

    isPlaying = function()
        return MusicPlayer.player_status == 'Play'
    end,

    setLoading = function(value)
        gMusicPlayer.isLoading = value
    end,

    reset = function(this)
        this.songIndex = 0
        this.loadedPlaylist = nil
    end,

    load = function(this)
        this:loadPlaylist(gData.lastPlaylistIndex, gData.lastSongIndex)
    end,

    save = function(this)
        if this.isPlaylistLoaded() then
            gData.lastPlaylistIndex
                = listIndexOf(this.loadedPlaylist.title, gData.playlists)
            gData.lastSongIndex = this.songIndex
        else
            gData.lastPlaylistIndex = 0
            gData.lasSongIndex = 0
        end
    end,

    loadPlaylist = function(this, index, songIndex)
        if index <= 0 or index > #gData.playlists then
            logDebug("Can't load playlist #" .. index)
            return
        end

        local playlist = gData.playlists[index]
        if #playlist.songs == 0 then
            notify(textNoSongs(playlist))
        else
            this.songIndex = 1
            if songIndex ~= nil and songIndex > 0
                and songIndex <= #playlist.songs then
                this.songIndex = songIndex
            end
            this.loadedPlaylist = playlist
            this.reload()
        end
    end,

    playSong = function(index)
        if notifyNoPlaylistLoaded() then return end
        gMusicPlayer.songIndex = index
        if gMusicPlayer.songIndex <= 0 or
            gMusicPlayer.songIndex > #gMusicPlayer.loadedPlaylist.songs then
            gMusicPlayer.songIndex = 1
        end
        gMusicPlayer.restart()
    end,

    nextSong = function()
        gMusicPlayer.playSong(gMusicPlayer.songIndex + 1)
    end,

    previousSong = function()
        gMusicPlayer.playSong(gMusicPlayer.songIndex - 1)
    end,

    playCoroutine = function(args)
        logDebug(MusicPlayer.player_status)
        if notifyNoPlaylistLoaded() then return end

        MusicPlayer.setPlaylist({}) -- Prevent bug with audio not working?...
        if gMusicPlayer.isPlaying() then
            if not MusicPlayer.pause() then
                log('Failed to pause MusicPlayer!')
            else
                gMusicPlayer.autoPlay = false
            end
        else
            if not MusicPlayer.play() then
                log('Failed to unpause MusicPlayer!')
                -- Try reloading audio
                gMusicPlayer.reloadAudioCoroutine()
            else
                gMusicPlayer.autoPlay = true
            end
        end
        logDebug(MusicPlayer.player_status)
    end,

    reloadAudioCoroutine = function(args)
        logDebug(MusicPlayer.player_status)
        if notifyNoPlaylistLoaded() then return end

        gMusicPlayer.setLoading(true)
        showMusicPlayerStatus()

        -- Setting the current Audioclip breaks the in-game Music Player UI,
        -- MusicPlayer.PlaylistEntry will be set to -1, and then the next /
        -- previous buttons are broken as well as the playlist. Unfortunately
        -- this is the only way to control which song is being played, therefore
        -- we reset the playlist and handle loading next songs ourselves.
        local clip = gMusicPlayer.loadedPlaylist.songs[gMusicPlayer.songIndex]
        MusicPlayer.setCurrentAudioclip(clip)
        MusicPlayer.setPlaylist({})

        local timeOut = 3.0
        local passedTime = 0.0
        while MusicPlayer.loaded == false and passedTime < timeOut do
            yield()
            passedTime = passedTime + Time.delta_time
        end

        if not MusicPlayer.loaded and passedTime >= timeOut then
            log('Music Player timed out')
            gMusicPlayer:reset()
        end

        -- Weird behaviour where MusicPlayer will be in 'Ready' or 'Pause'
        -- state for one frame, after which it will go to 'Play'
        logDebug(MusicPlayer.player_status)
        if MusicPlayer.player_status == 'Pause' or
                MusicPlayer.player_status == 'Ready' then
            --log('MusicPlayer: ' .. MusicPlayer.player_status)
            yield()
        end
        logDebug(MusicPlayer.player_status)

        gMusicPlayer.setLoading(false)
    end,

    restartCoroutine = function(args)
        gMusicPlayer.reloadAudioCoroutine()
        if not gMusicPlayer.isPlaying() then
            gMusicPlayer.playCoroutine()
        else
            gMusicPlayer.autoPlay = true
        end
        showMusicPlayerStatus()
    end,

    reloadCoroutine = function(args)
        gMusicPlayer.reloadAudioCoroutine()
        if gMusicPlayer.isPlaying() then
            gMusicPlayer.playCoroutine()
        end
        showMusicPlayerStatus()
    end,

    pausePlayCoroutine = function(args)
        gMusicPlayer.playCoroutine()
        showMusicPlayerStatus()
    end,

    isPlaylistLoaded = function()
        return gMusicPlayer.loadedPlaylist ~= nil
            and #gMusicPlayer.loadedPlaylist.songs ~= 0
    end,

    textNoPlaylistLoaded = function()
        return "No playlist loaded!"
    end,

    play = function()
        if notifyNoPlaylistLoaded() then return end

        local currentSong = MusicPlayer.getCurrentAudioclip()
        if isEmptyTable(currentSong) then
            logDebug('empty table!')
            gMusicPlayer.restart()
        else
            gCoroutine.start(gMusicPlayer.pausePlayCoroutine)
        end
    end,

    restart = function()
        if notifyNoPlaylistLoaded() then return end

        -- MusicPlayer.skipBack() Nope: only works after 3 seconds
        gCoroutine.start(gMusicPlayer.restartCoroutine)
    end,

    reload = function()
        if notifyNoPlaylistLoaded() then return end
        gCoroutine.start(gMusicPlayer.reloadCoroutine)
    end,
}

textSongPlaying = function(playlist, index)
    local noSongs = textNoSongs(playlist)
    if noSongs ~= nil then
        return noSongs
    end

    local str = ''
    for k , song in ipairs(playlist.songs) do
        if k == index then
            if gMusicPlayer.isPlaying() then
                str = str .. ' >'
            else
                str = str .. '>|'
            end
        end
        str = str .. '#' .. k .. ' ' .. song.title .. ' ('
        str = str .. song.url .. ')\n' -- todo: cap string length
    end
    return str
end

function showMusicPlayerStatus()
    local status = ''
    if gMusicPlayer.isLoading then
        status = status .. 'Loading...\n'
    end

    if gMusicPlayer.isPlaylistLoaded() then
        status = status .. "Playlist '"
        status = status .. gMusicPlayer.loadedPlaylist.title .. "'\n"
        status = status .. textSongPlaying(gMusicPlayer.loadedPlaylist,
            gMusicPlayer.songIndex)
    else
        status = status .. "No playlist loaded\n"
    end

    if status != '' then log(status) end
end

function notifyNoPlaylistLoaded()
    if not gMusicPlayer.isPlaylistLoaded() then
        log(gMusicPlayer.textNoPlaylistLoaded())
        return true
    end
    return false
end

function reload(menu)
    gMenuStack.pop()
    loadMenu(menu)
end

function goBackMenu()
    gMenuStack.pop()
    loadMenu()
end

function goHome()
    if #gMenuStack > 1 then
        while #gMenuStack > 1 do
            gMenuStack.pop()
        end
        loadMenu()
    end
end

function loadMenu(menu)
    -- Initialize default menu if there is no state
    if #gMenuStack == 0 then
        menu = menu or gMenus.default
        gMenu.current = gMenu.current or menu
    end

    -- Push menu to stack, or load top of stack
    if menu ~= nil then
        gMenuStack.push(menu)
    else
        menu = gMenuStack[1]
    end

    menu:onLoad()

    -- Update reference to selected menu
    local oldIndex = gMenu.current.selectedItemIndex
    gMenu.current = menu

    -- Update title titleHeader
    gView.setText('titleHeader', menu.title)

    -- Reset all button views
    for i = 1, gMenu.maxItems do
        gView.getInput(i):reset()
        gView.getButton(i):reset()
    end

    -- Show buttons in menu
    for k, menuItem in pairs(menu.items) do
        if k > gMenu.maxItems then
            break
        end

        local view = menuItem:getView()
        if menuItem.isInputButton then
            view:setPlaceholderText(menuItem.title)
            view:setText('')
        else
            view:setText(menuItem.title)
        end

        view:show()
    end

    menu:onShow()

    -- Highlight only the selected button
    selectButton(oldIndex, menu.selectedItemIndex)
end

function selectButton(oldIndex, newIndex)
    gView.getButton(oldIndex):setColor(gMenuItem.defaultColor)
    gView.getInput(oldIndex):setColor(gMenuItem.defaultColor)
    gMenu.current:getItem(newIndex):getView():setColor(gMenuItem.selectedColor)
    gMenu.current.selectedItemIndex = newIndex
end

function onInput(player, value, uiElementId)
    --log(player.steam_name .. " typed: " .. value .. " by id: " .. uiElementId)
    gView.getElement(uiElementId):setText("")
end

function onInputEnded(player, value, uiElementId)
    --log(player.steam_name .. " ended input: " .. value)
end

function onInputClicked(player, button, uiElementId)
    --log(player.steam_name .. " got focus: " .. button)
    goHome()
end

function uiIndexOf(elementId)
    return tonumber(string.sub(elementId, string.len(elementId)))
end

function onMenuItemClicked(player, button, uiElementId)
    if not isLeftMouseButton(button) then
        return
    end

    local oldIndex = gMenu.current.selectedItemIndex
    local index = uiIndexOf(uiElementId)
    local menuItem = gMenu.current:getItem(index)
    local selectIndex = choose(menuItem.isBackButton, 1, index)

    selectButton(oldIndex, selectIndex)
    menuItem:onClicked()
end

function onMenubarItemClicked(player, button, uiElementId)
    if not isLeftMouseButton(button) then
        return
    end

    local index = uiIndexOf(uiElementId)
    local menuItem = gMenus.menuBar:getItem(index)
    menuItem:onClicked()
end

function crushToNumberOrNil(value)
    while tonumber(value) == nil and string.len(value) > 0 do
        value = string.sub(value, 1, string.len(value) - 1)
    end
    return tonumber(value)
end

function onInputItemTextChanged(player, value, uiElementId)
    local index = uiIndexOf(uiElementId)
    local menuItem = gMenu.current:getItem(index)

    if menuItem.isNumericInput then
        local uiElement = gView.getElement(uiElementId)
        value = crushToNumberOrNil(value)
        if value ~= nil then
            uiElement:setPlaceholderText(menuItem.title .. value)
        else
            uiElement:setText(value)
        end
    end

    menuItem.data = value
end

function load(savedData)
    if savedData ~= '' then
        gData = new(gData, JSON.decode(savedData))
	end
end

function onSave()
    gMusicPlayer:save()
	return JSON.encode(gData)
end

function onChat(message, sender)
    --log(message)
    --log(sender)
end

function onExternalMessage(data)
    --log(data)
end

function onUpdate()
    if gMusicPlayer.autoPlay and not gCoroutine.isProcessing then
        if gMusicPlayer.isPlaylistLoaded() and not gMusicPlayer.isPlaying() then
            gMusicPlayer.nextSong()
        end
    end
end

function addTabs(str, amount)
    for i=1,amount do
        str = str .. '\t'
    end
    return str
end

function stringify(object, depth)
    depth = depth or 1

    if object == nil then
        return 'nil'
    end

    if not isTable(object) then
        if depth ~= 1 then
            return '"' .. tostring(object) .. '"'
        else
            return tostring(object)
        end
    end

    if isEmptyTable(object) then
        return '{}'
    end

    local s = '{\n'
    for k,v in pairs(object) do
        if isNumber(k) then k = '['..k..']' end
        s = addTabs(s,depth) .. k ..' = ' .. stringify(v, depth+1) .. '\n'
    end

    return addTabs(s,depth-1) .. '}'
end

function clearScreen()
    gWindow.text = ''
end

function show(message)
    clearScreen()
    output(message)
end

function log(message)
    if not gWindow.log then
        return
    end
    output(message)
end

function logDebug(message)
    if gDebug.log then
        print(stringify(message))
    end
end

function output(message)
    gWindow.text = stringify(message) .. '\n' .. gWindow.text
    gView.setText(gWindow.id, gWindow.text)
end