-- Advanced Music Player v1.0 by VultureX

function new(parent, object)
    object = object or {}
    setmetatable(object, parent)
    parent.__index = parent -- inherit missing properties
    return object
end

function isTable(object)    return type(object) == 'table'  end
function isNumber(object)   return type(object) == 'number' end
function isString(object)   return type(object) == 'string' end
function isFunction(object) return type(object) == 'function' end
function stringOr(a, b) if isString(a) then return a else return b end end
function isNonEmptyString(a) return isString(a) and a ~= '' end
function isEmptyTable(a) return isTable(a) and next(a) == nil end

gDebug = {
    log             = true,
    text            = '',
}

gMenu = {
    current             = nil, -- gMenu
    items               = nil, -- {gMenuItem}
    selectedItemIndex   = 1,
    maxItems            = 6,
    title               = '',
    data                = nil, -- context dependent data
    onConfirm           = function(this) end,
    onShow              = function(this) end,
    onLoad              = function(this) gMenu.initItems(this) end,

    initItems = function(this)
        for k,item in pairs(this.items) do
            if item.isInputButton then
                item.data = nil
            end
            item.inputView = gView.getInput(k)
            item.buttonView = gView.getButton(k)
        end
    end,

    getSelectedItem = function(this)
        return this.items[this.selectedItemIndex]
    end,
    getItem = function(this, index)
        return this.items[index]
    end,

    withPlaylistItems = function(me, nextMenu)
        me.onLoad = function(this)
            -- Remove existing playlist items
            for i=#this.items,1,-1 do
                if this.items[i].isPlaylistItem then
                    table.remove(this.items, i)
                end
            end

            -- Add items with playlist titles
            for _ , playlist in pairs(gData.playlists) do
                if #this.items >= gMenu.maxItems then
                    break
                end

                local item = gMenuItem.new(playlist.title)
                item.isPlaylistItem = true
                item.nextMenu = nextMenu
                item.data = playlist
                item.onClicked = passItemDataOnClick
                table.insert(this.items, 1, item)
            end

            gMenu.onLoad(this)
        end
        me.onShow = function(this)
            notify(textNoPlaylists())
            gMenu.onShow(this)
        end
    end,
}

gSongData = {
    songs       = {}, -- {gSong}
    songIndex   = 0,
}

function notify(message)
    if message ~= nil then show(message) end
end

textNoPlaylists = function()
    if #gData.playlists == 0 then
        return "There are no playlists!"
    end
    return nil
end

textPlaylists = function()
    local noPlaylists = textNoPlaylists()
    if noPlaylists ~= nil then
        return noPlaylists
    end

    local str = 'Playlists:\n'
    for k , playlist in pairs(gData.playlists) do
        str = str .. '#' .. k .. ' ' .. playlist.title .. '\n'
    end
    return str
end

textSongs = function(playlist)
    local noSongs = textNoSongs(playlist)
    if noSongs ~= nil then
        return noSongs
    end

    local str = 'Songs in ' .. playlist.title .. ':\n'
    for k , song in pairs(playlist.songs) do
        str = str .. '#' .. k .. ' ' .. song.title .. ' ('
        str = str .. song.url .. ')\n' -- todo: cap string length
    end
    return str
end

textNoSongs = function(playlist)
    if #playlist.songs == 0 then
        return "Playlist '" .. playlist.title .. "' is empty!"
    end
    return nil
end

passItemDataOnClick = function(item)
    setMenuData(item.nextMenu, item.data)
    gMenuItem.onClicked(item)
end

passMenuDataOnClick = function(item)
    setMenuData(item.nextMenu, gMenu.current.data)
    gMenuItem.onClicked(item)
end

setMenuData = function(menu, data)
    if menu ~= nil then
        menu.data = data
    end
end

gMenus = {
    main                = new(gMenu),
    playlist            = new(gMenu),
    createPlaylist      = new(gMenu),
    editPlaylist        = new(gMenu),
    editPlaylistOptions = new(gMenu),
    addSong             = new(gMenu),
    removeSong          = new(gMenu),
    removePlaylist      = new(gMenu),
    removeConfirm       = new(gMenu),
    default             = nil, -- set to one of above in gMenus.construct()

    construct = function()
        gMenus.main.title = 'Advanced Music Player'
        local loadPlaylistItem = gMenuItem.new('Load playlist')
        loadPlaylistItem.onClicked = function(this)
            local playlistIndex = gMenu.current:getItem(1).data -- Todo: hard coded
            if playlistIndex ~= nil then
                playlistIndex = tonumber(playlistIndex)
                if playlistIndex > 0 and playlistIndex <= #gData.playlists then
                    if(#gData.playlists[playlistIndex].songs == 0) then
                        log(textNoSongs(gData.playlists[playlistIndex]))
                    else
                        gMusicPlayer.songIndex = 1
                        gMusicPlayer.loadedPlaylist = gData.playlists[playlistIndex]
                        gMusicPlayer.reload()
                        --log('Loaded ' .. gData.playlists[playlistIndex].title)
                        --gMenuItem.onClicked(this)
                    end
                else
                    log('Playlist #' .. playlistIndex .. ' does not exist!')
                end
            else
                log('Please enter a playlist number!')
            end
        end
        local playItem = gMenuItem.new('Play / Pause')
        playItem.onClicked = function(this)
            gMusicPlayer.play()
            --gMenuItem.onClicked(this)
        end
        local restartItem = gMenuItem.new('Restart Song')
        restartItem.onClicked = function(this)
            gMusicPlayer.restart()
            --gMenuItem.onClicked(this)
        end
        local nextSongItem = gMenuItem.new('Next Song')
        nextSongItem.onClicked = function(this)
            gMusicPlayer.nextSong()
        end
        gMenus.main.items = {
            gMenuItem.newNumericInput('Playlist #...'), --todo: show name, press keys for +1, +10 etc.
            loadPlaylistItem,
            playItem,
            restartItem,
            nextSongItem,
            --gMenuItem.new('Favorites'),
            gMenuItem.new('Playlists', gMenus.playlist),
            --gMenuItem.new('Status'),
            --gMenuItem.new('Settings'),
        }
        gMenus.main.onShow = function(this)
            clearScreen()
            showMusicPlayerStatus()
            gMenu.onShow(this)
        end
        gMenus.playlist.title = 'Playlists'
        gMenus.playlist.items = {
            --gMenuItem.new('Favorites'),
            gMenuItem.new('Create', gMenus.createPlaylist),
            gMenuItem.new('Edit', gMenus.editPlaylist),
            gMenuItem.new('Remove', gMenus.removePlaylist),
            gMenuItem.newBackButton(),
        }
        gMenus.createPlaylist.title = 'Create Playlist'
        gMenus.createPlaylist.items = {
            gMenuItem.newInput('Enter Name'),
            gMenuItem.newConfirmButton(),
            gMenuItem.newBackButton(),
        }
        gMenus.createPlaylist.onConfirm = function(this)
            local inputText = this:getItem(1).data -- Todo: hard coded
            if isNonEmptyString(inputText) then
                addPlaylist(inputText)
            else
                log('Please enter a name!')
            end
        end
        gMenus.editPlaylist.title = 'Edit playlists'
        gMenus.editPlaylist.items = {
            gMenuItem.newBackButton(),
        }
        gMenus.editPlaylist:withPlaylistItems(gMenus.editPlaylistOptions)

        gMenus.editPlaylistOptions.title = 'Edit playlist'
        local addSongItem = gMenuItem.new('Add Song', gMenus.addSong)
        addSongItem.onClicked = passMenuDataOnClick
        local removeSongItem = gMenuItem.new('Remove', gMenus.removeSong)
        removeSongItem.onClicked = function(this)
            -- gMenu.current.data is expected to be a gPlaylist
            local songIndex = gMenu.current:getItem(2).data -- Todo: hard coded
            if songIndex ~= nil then
                songIndex = tonumber(songIndex)
                if songIndex > 0 and songIndex <= #gMenu.current.data.songs then
                    local songData = new(gSongData)
                    songData.songs = gMenu.current.data.songs
                    songData.songIndex = songIndex
                    setMenuData(this.nextMenu, songData)
                    gMenuItem.onClicked(this)
                else
                    log('Song #' .. songIndex .. ' does not exist!')
                end
            else
                log('Please enter a song number!')
            end
        end
        gMenus.editPlaylistOptions.items = {
            addSongItem,
            gMenuItem.newNumericInput('Enter Song #...'),
            --gMenuItem.new('Edit'),
            removeSongItem,
            gMenuItem.newBackButton(),
        }
        gMenus.editPlaylistOptions.onLoad = function(menu)
            menu.title = 'Edit ' .. menu.data.title
            gMenu.onLoad(menu)
        end
        gMenus.editPlaylistOptions.onShow = function(this)
            notify(textSongs(this.data))
            gMenu.onShow(this)
        end

        gMenus.addSong.title = 'Add Song to playlist'
        gMenus.addSong.items = {
            gMenuItem.newInput('Enter Name'),
            gMenuItem.newInput('Enter Url'),
            gMenuItem.newConfirmButton(),
            gMenuItem.newBackButton(),
        }
        gMenus.addSong.onConfirm = function(this)
            local nameText = this:getItem(1).data -- Todo: hard coded
            local urlText = this:getItem(2).data
            if isNonEmptyString(nameText) and isNonEmptyString(urlText) then
                addSong(nameText, urlText, gMenu.current.data)
                log(textSongs(gMenu.current.data))
            else
                log('Please enter a name and url!')
            end
        end
        gMenus.addSong.onLoad = function(menu)
            menu.title = 'Add Song to ' .. menu.data.title
            gMenu.onLoad(menu)
        end

        gMenus.removePlaylist.title = 'Remove playlist'
        gMenus.removePlaylist.items = {
            gMenuItem.newBackButton(),
        }
        gMenus.removePlaylist:withPlaylistItems(gMenus.removeConfirm)
        gMenus.removeConfirm.items = {
            gMenuItem.newBackButton(),
            gMenuItem.newConfirmButton(), --Todo: move confirm button to bottom, add hidden disabled buttons
        }
        gMenus.removeConfirm.onLoad = function(menu)
            menu.title = 'Remove ' .. menu.data.title .. '?'
            gMenu.onLoad(menu)
        end
        gMenus.removeConfirm.onConfirm = function(menu)
            -- data is expected to be a gPlaylist
            local index = listIndexOf(menu.data.title, gData.playlists)
            if index > 0 then
                table.remove(gData.playlists, index)
                show("Removed '" .. menu.data.title .. "'")
                goBackMenu()
            end
        end

        gMenus.removeSong.items = {
            gMenuItem.newBackButton(),
            gMenuItem.newConfirmButton(), --Todo: move confirm button to bottom, add hidden disabled buttons
        }
        gMenus.removeSong.onLoad = function(menu)
            menu.title = 'Remove ' .. menu.data.songs[menu.data.songIndex].title .. '?'
            gMenu.onLoad(menu)
        end
        gMenus.removeSong.onConfirm = function(menu)
            -- data is expected to be gSongData
            local songTitle = menu.data.songs[menu.data.songIndex].title
            table.remove(menu.data.songs, menu.data.songIndex)
            show("Removed '" .. songTitle .. "'")
            goBackMenu()
        end

        gMenus.default = gMenus.main
    end
}

gMenuItem = {
    defaultColor    = "rgb(1,1,1)",
    selectedColor   = "rgb(0.5,1,1)",
    buttonView      = nil, -- gView
    inputView       = nil, -- gView
    data            = nil, -- context dependent data

    title           = '',
    nextMenu        = nil, -- gMenu
    isInputButton   = false,
    isBackButton    = false,
    isConfirmButton = false,
    isNumericInput  = false,
    isPlaylistItem  = false,
    isSongItem      = false,

    onClicked = function(this)
        if this.nextMenu == nil then
            if not this.isInputButton then print('nextMenu is nil!') end
            return
        end

        loadMenu(this.nextMenu)
    end,

    getView = function(this)
        if this.isInputButton then
            return this.inputView
        else
            return this.buttonView
        end
    end,

    new = function(title, nextMenu)
        return new(gMenuItem, {title=title, nextMenu=nextMenu})
    end,
    newInput = function(title, nextMenu)
        return new(gMenuItem, {
            title=title,
            nextMenu=nextMenu,
            isInputButton=true,
        })
    end,
    newNumericInput = function(title, nextMenu)
        local item = gMenuItem.newInput(title, nextMenu)
        item.isNumericInput=true
        return item
    end,
    newBackButton = function()
        return new(gMenuItem, {
            title='Back',
            isBackButton=true,
            onClicked=function(this) goBackMenu() end
        })
    end,
    newConfirmButton = function()
        return new(gMenuItem, {
            title='Confirm',
            isConfirmButton=true,
            onClicked=function(this) gMenu.current:onConfirm() end
        })
    end,
}

gMenuStack = {
    push = function(menu)
        table.insert(gMenuStack, 1, menu)
    end,
    pop = function()
        table.remove(gMenuStack, 1)
    end,
}

gView = {
    id = '',

    setText = function(thisOrId, value)
        gView.set(thisOrId, "text", value)
    end,
    setPlaceholderText = function(thisOrId, value)
        gView.set(thisOrId, "placeholder", value)
    end,
    setInteractable = function(thisOrId, value)
        gView.set(thisOrId, "interactable", value)
    end,
    hide = function(thisOrId)
        gView.set(thisOrId, "active", false)
    end,
    show = function(thisOrId, val)
        gView.set(thisOrId, "active", val or true)
    end,
    setColor = function(thisOrId, color)
        gView.set(thisOrId, "color", color)
    end,
    -- Don't use this, it doesn't work well
    setNumericInput = function(thisOrId, isNumeric)
        local mode
        if isNumeric then mode = "Integer" else mode = "None" end
        gView.set(thisOrId, "characterValidation", mode)
    end,
    set = function(thisOrId, attribute, val)
        self.UI.setAttribute(stringOr(thisOrId, thisOrId.id), attribute, val)
    end,
    reset = function(this)
        this:hide()
        this:setInteractable(true)
    end,

    getButton = function(index)
        return gView.getElement('button' .. index)
    end,
    getInput = function(index)
        local view = gView.getElement('input' .. index)
        local scrollView = gView.getElement('inputScroll' .. index)
        view.show = function(thisOrId, val)
            gView.show(scrollView, val)
            gView.show(thisOrId, val)
        end
        view.hide = function(thisOrId)
            gView.hide(scrollView)
            gView.hide(thisOrId)
        end
        return view
    end,
    getElement = function(id)
        -- todo: optimize. Cache elements, put id in new table
        return new(gView, {id=id})
    end,
}

gPlaylist = {
    title       = '',
    songs       = {}, -- {gSong}
}

gSong = {
    title       = '',
    url         = '',
}

gData = {
    playlists   = {}, -- {gPlaylist}
}

function listIndexOf(title, list)
    for k,v in pairs(list) do
        if v.title == title then
            return k
        end
    end
    return -1
end

function existsPlaylist(title)
    return listIndexOf(title, gData.playlists) > 0
end

function existsSong(title, songs)
    return listIndexOf(title, songs) > 0
end

function addPlaylist(name)
    if existsPlaylist(name) then
        log("Playlist '" .. name .. "' already exists!")
        return false
    end

    -- don't use new(gPlaylist) or gPlaylist, we need a deep copy!
    table.insert(gData.playlists, 1, {})
    gData.playlists[1].title = name
    gData.songs = {}

    log('Added: ' .. name)
    return true
end

function addSong(name, url, playlist)
    if existsSong(name, playlist.songs) then
        log("Song '" .. name .. "' already exists!")
        return false
    end

    local newIndex = #playlist.songs + 1
    table.insert(playlist.songs, newIndex, {})
    playlist.songs[newIndex].title = name
    playlist.songs[newIndex].url = url

    log('Added song: ' .. name .. '\nurl: ' .. url)
    return true
end

function onLoad(userData)
    load(userData)

    gMenus.construct()
    loadMenu(gMenu.main)
    --loadMenu(gMenus.playlist)
end

function yield()
    coroutine.yield(0)
end

gCoroutine = {
    isProcessing        = false,
    functionToExecute   = nil, -- function(args)
    args                = nil, -- arguments for functionToExecute

    setArgs = function(args)
        if gCoroutine.isProcessing then
            log("Coroutine is still processing! (setArgs)")
            return false
        end
        gCoroutine.args = args
        return true
    end,

    impl = function()
        gCoroutine.functionToExecute(gCoroutine.args)
        gCoroutine.args = nil
        gCoroutine.isProcessing = false
        return 1
    end,

    start = function(action)
        if not isFunction(action) then
            log("Can't execute null action! (start)")
            return false
        end

        if gCoroutine.isProcessing then
            log("Coroutine is still processing! (start)")
            return false
        end

        gCoroutine.isProcessing = true
        gCoroutine.functionToExecute = action
        startLuaCoroutine(self, "gExec")
        return true
    end,
}
gExec = gCoroutine.impl

gMusicPlayer = {
    songIndex               = 0,
    loadedPlaylist          = nil, --gPlaylist
    isLoading               = false,
    autoPlay                = false,

    isPlaying = function()
        return MusicPlayer.player_status == 'Play'
    end,

    setLoading = function(value)
        gMusicPlayer.isLoading = value
    end,

    nextSong = function()
        if notifyNoPlaylistLoaded() then return end
        gMusicPlayer.songIndex = gMusicPlayer.songIndex + 1
        if gMusicPlayer.songIndex > #gMusicPlayer.loadedPlaylist.songs then
            gMusicPlayer.songIndex = 1
        end
        gMusicPlayer.restart()
    end,

    playCoroutine = function(args)
        print(MusicPlayer.player_status)
        if notifyNoPlaylistLoaded() then return end

        local clip = gMusicPlayer.loadedPlaylist.songs[gMusicPlayer.songIndex]
        --MusicPlayer.setPlaylist(gMusicPlayer.loadedPlaylist.songs) -- Prevent bug with audio not working?...
        MusicPlayer.setPlaylist({}) -- Prevent bug with audio not working?...
        if gMusicPlayer.isPlaying() then
            if not MusicPlayer.pause() then
                log('Failed to pause MusicPlayer!')
            else
                gMusicPlayer.autoPlay = false
            end
        else
            if not MusicPlayer.play() then
                log('Failed to unpause MusicPlayer!')
                -- Try reloading audio
                gMusicPlayer.reloadAudioCoroutine()
            else
                gMusicPlayer.autoPlay = true
            end
        end
        print(MusicPlayer.player_status)
    end,

    reloadAudioCoroutine = function(args)
        print(MusicPlayer.player_status)
        if notifyNoPlaylistLoaded() then return end

        gMusicPlayer.setLoading(true)
        showMusicPlayerStatus()

        local clip = gMusicPlayer.loadedPlaylist.songs[gMusicPlayer.songIndex]
        MusicPlayer.setCurrentAudioclip(clip)

        -- Setting the current Audioclip breaks the Music Player,
        -- MusicPlayer.PlaylistEntry will be set to -1, and then next/previous buttons are broken
        -- as well as the playlist. Unfortunately this is the only way to control which song is
        -- being played, therefore set playlist empty and handle it ourselves.
        --MusicPlayer.setPlaylist(gMusicPlayer.loadedPlaylist.songs)
        MusicPlayer.setPlaylist({})

        local timeOut = 3.0
        local passedTime = 0.0
        while MusicPlayer.loaded == false and passedTime < timeOut do
            yield()
            passedTime = passedTime + Time.delta_time
        end

        if not MusicPlayer.loaded and passedTime >= timeOut then
            log('Music Player timed out')
            gMusicPlayer.songIndex = 0
            gMusicPlayer.loadedPlaylist = nil
        end

        -- Weird behaviour where MusicPlayer will be in 'Ready' or 'Pause'
        -- state for one frame, after which it will go to 'Play'
        print(MusicPlayer.player_status)
        if MusicPlayer.player_status == 'Pause' or
                MusicPlayer.player_status == 'Ready' then
            --log('MusicPlayer: ' .. MusicPlayer.player_status)
            yield()
        end
        print(MusicPlayer.player_status)

        gMusicPlayer.setLoading(false)
    end,

    restartCoroutine = function(args)
        gMusicPlayer.reloadAudioCoroutine()
        if not gMusicPlayer.isPlaying() then
            gMusicPlayer.playCoroutine()
        else
            gMusicPlayer.autoPlay = true
        end
        showMusicPlayerStatus()
    end,

    reloadCoroutine = function(args)
        gMusicPlayer.reloadAudioCoroutine()
        if gMusicPlayer.isPlaying() then
            gMusicPlayer.playCoroutine()
        end
        showMusicPlayerStatus()
    end,

    pausePlayCoroutine = function(args)
        gMusicPlayer.playCoroutine()
        showMusicPlayerStatus()
    end,

    isPlaylistLoaded = function()
        return gMusicPlayer.loadedPlaylist ~= nil
            and #gMusicPlayer.loadedPlaylist.songs ~= 0
    end,

    textNoPlaylistLoaded = function()
        return "No playlist loaded!"
    end,

    play = function()
        if notifyNoPlaylistLoaded() then return end

        local currentSong = MusicPlayer.getCurrentAudioclip()
        if isEmptyTable(currentSong) then
            log('empty table!')
            gMusicPlayer.restart()
        else
            gCoroutine.start(gMusicPlayer.pausePlayCoroutine)
        end
    end,

    restart = function()
        if notifyNoPlaylistLoaded() then return end

        -- MusicPlayer.skipBack() Nope: only works after 3 seconds
        gCoroutine.start(gMusicPlayer.restartCoroutine)
    end,

    reload = function()
        if notifyNoPlaylistLoaded() then return end
        gCoroutine.start(gMusicPlayer.reloadCoroutine)
    end,
}

textSongPlaying = function(playlist, index)
    local noSongs = textNoSongs(playlist)
    if noSongs ~= nil then
        return noSongs
    end

    local str = ''
    for k , song in ipairs(playlist.songs) do
        if k == index then
            if gMusicPlayer.isPlaying() then
                str = str .. ' >'
            else
                str = str .. '>|'
            end
        end
        str = str .. '#' .. k .. ' ' .. song.title .. ' ('
        str = str .. song.url .. ')\n' -- todo: cap string length
    end
    return str
end

function showMusicPlayerStatus()
    local status = ''
    if gMusicPlayer.isLoading then
        status = status .. 'Loading...\n'
    end

    status = status .. "Playlist '"
    if gMusicPlayer.isPlaylistLoaded() then
        status = status .. gMusicPlayer.loadedPlaylist.title .. "'\n"
        status = status .. textSongPlaying(gMusicPlayer.loadedPlaylist,
            gMusicPlayer.songIndex)
    else
        status = status .. "None'\n"
    end

    log(status)
end

function notifyNoPlaylistLoaded()
    if not gMusicPlayer.isPlaylistLoaded() then
        log(gMusicPlayer.textNoPlaylistLoaded())
        return true
    end
    return false
end

function reload(menu)
    gMenuStack.pop()
    loadMenu(menu)
end

function goBackMenu()
    gMenuStack.pop()
    loadMenu()
end

function goHome()
    if #gMenuStack > 1 then
        while #gMenuStack > 1 do
            gMenuStack.pop()
        end
        loadMenu()
    end
end

function loadMenu(menu)
    -- Initialize default menu if there is no state
    if #gMenuStack == 0 then
        menu = menu or gMenus.default
        gMenu.current = gMenu.current or menu
    end

    -- Push menu to stack, or load top of stack
    if menu ~= nil then
        gMenuStack.push(menu)
    else
        menu = gMenuStack[1]
    end

    menu:onLoad()

    -- Update reference to selected menu
    local oldIndex = gMenu.current.selectedItemIndex
    gMenu.current = menu

    -- Update title titleHeader
    gView.setText('titleHeader', menu.title)

    -- Reset all button views
    for i = 1, gMenu.maxItems do
        gView.getInput(i):reset()
        gView.getButton(i):reset()
    end

    -- Show buttons in menu
    for k, menuItem in pairs(menu.items) do
        if k > gMenu.maxItems then
            break
        end

        local view = menuItem:getView()
        if menuItem.isInputButton then
            view:setPlaceholderText(menuItem.title)
            view:setText('')
        else
            view:setText(menuItem.title)
        end

        view:show()
    end

    menu:onShow()

    -- Highlight only the selected button
    selectButton(oldIndex, menu.selectedItemIndex)
end

function selectButton(oldIndex, newIndex)
    gView.getButton(oldIndex):setColor(gMenuItem.defaultColor)
    gView.getInput(oldIndex):setColor(gMenuItem.defaultColor)
    gMenu.current:getItem(newIndex):getView():setColor(gMenuItem.selectedColor)
    gMenu.current.selectedItemIndex = newIndex
end

function onInput(player, value, uiElementId)
    --log(player.steam_name .. " typed: " .. value .. " by id: " .. uiElementId)
    gView.getElement(uiElementId):setText("")
end

function onInputEnded(player, value, uiElementId)
    --log(player.steam_name .. " ended input: " .. value)
end

function onInputClicked(player, button, uiElementId)
    --log(player.steam_name .. " got focus: " .. button)
    goHome()
end

function uiIndexOf(elementId)
    return tonumber(string.sub(elementId, string.len(elementId)))
end

function onMenuItemClicked(player, button, uiElementId)
    local oldIndex = gMenu.current.selectedItemIndex
    local index = uiIndexOf(uiElementId)

    if gMenu.current:getItem(index).isBackButton then
        -- Always select first button when going back
        selectButton(oldIndex, 1)
    else
        selectButton(oldIndex, index)
    end

    --log('clicked: ' .. index .. ' oldItem: ' .. oldIndex)
    local menuItem = gMenu.current.items[index]
    menuItem:onClicked()
end

function crushToNumberOrNil(value)
    while tonumber(value) == nil and string.len(value) > 0 do
        value = string.sub(value, 1, string.len(value) - 1)
    end
    return tonumber(value)
end

function onInputItemTextChanged(player, value, uiElementId)
    local index = uiIndexOf(uiElementId)
    local menuItem = gMenu.current:getItem(index)

    if menuItem.isNumericInput then
        local uiElement = gView.getElement(uiElementId)
        value = crushToNumberOrNil(value)
        if value ~= nil then
            uiElement:setPlaceholderText(menuItem.title .. value)
        else
            uiElement:setText(value)
        end
    end

    menuItem.data = value
end

function load(savedData)
    if savedData ~= '' then
        gData = JSON.decode(savedData)
	end
end

function onSave()
	return JSON.encode(gData)
end

function onChat(message, sender)
    --log(message)
    --log(sender)
end

function onExternalMessage(data)
    --log(data)
end

function onUpdate()
    if gMusicPlayer.autoPlay and not gCoroutine.isProcessing then
        if gMusicPlayer.isPlaylistLoaded() and not gMusicPlayer.isPlaying() then
            gMusicPlayer.nextSong()
        end
    end
end

function addTabs(str, amount)
    for i=1,amount do
        str = str .. '\t'
    end
    return str
end

function stringify(object, depth)
    depth = depth or 1

    if object == nil then
        return 'nil'
    end

    if not isTable(object) then
        if depth ~= 1 then
            return '"' .. tostring(object) .. '"'
        else
            return tostring(object)
        end
    end

    if isEmptyTable(object) then
        return '{}'
    end

    local s = '{\n'
    for k,v in pairs(object) do
        if isNumber(k) then k = '['..k..']' end
        s = addTabs(s,depth) .. k ..' = ' .. stringify(v, depth+1) .. '\n'
    end

    return addTabs(s,depth-1) .. '}'
end

function clearScreen()
    gDebug.text = ''
end

function show(message)
    clearScreen()
    output(message)
end

function log(message)
    if not gDebug.log then
        return
    end
    output(message)
end

function output(message)
    gDebug.text = stringify(message) .. '\n' .. gDebug.text
    gView.setText('debugLog', gDebug.text)
end